var proxy = require('./proxy'),
<<<<<<< HEAD
  userAgent = require('./useragent');
=======
<<<<<<< HEAD
  userAgent = require('./useragent'),
  rejectUnauthorized = require('./rejectUnauthorized');
=======
  userAgent = require('./useragent');
>>>>>>> 17d820e5fcb1d8a4629cdfc132404d3c3c4e068d
>>>>>>> 38b3550458882284073f16d673a24f4c13324fc2

/**
 * The options passed to request when downloading the bibary
 *
 * There some nuance to how request handles options. Specifically
 * we've been caught by their usage of `hasOwnProperty` rather than
 * falsey checks. By moving the options generation into a util helper
 * we can test for regressions.
 *
 * @return {Object} an options object for request
 * @api private
 */
module.exports = function() {
  var options = {
<<<<<<< HEAD
    rejectUnauthorized: false,
=======
<<<<<<< HEAD
    rejectUnauthorized: rejectUnauthorized(),
=======
    rejectUnauthorized: false,
>>>>>>> 17d820e5fcb1d8a4629cdfc132404d3c3c4e068d
>>>>>>> 38b3550458882284073f16d673a24f4c13324fc2
    timeout: 60000,
    headers: {
      'User-Agent': userAgent(),
    },
    encoding: null,
  };

  var proxyConfig = proxy();
  if (proxyConfig) {
    options.proxy = proxyConfig;
  }

  return options;
};
